Ubuntu Update/Upgrade
==============
sudo apt-get update
sudo apt-get upgrade



SSH server
==========
sudo apt-get install openssh-server

config:  /etc/ssh/sshd_config

Restart
sudo systemctl restart ssh
or
sudo service ssh restart

Show ssh status
systemctl status ssh



curl
====
sudo apt-get install curl



google Chrome
=============
Download 64 bit .deb version from Chrome website
On Ubuntu 16.04.2, double click the deb install to start install
On Ubuntu 16.04, double click won't work, alternatively, need to run following
sudo dpkg -i google-chrome-stable_current_amd64.deb
sudo apt-get -f install



nodejs
======
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs




MongoDB
=======
Import the public key used by the package management system
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6

Create a list file for MongoDB
for Ubuntu 16.04
echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
or
echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list

Reload local package database
sudo apt-get update

Install the MongoDB packages
sudo apt-get install -y mongodb-org

Create mongod service and enable the service on startup
sudo systemctl enable mongod.service

To refresh the services
sudo systemctl daemon-reload

Start MongoDB
sudo systemctl start mongod

Stop MongoDB
sudo systemctl stop mongod

Create symbolic links at user directory
cd ~
mkdir mongodb
mkdir mongodb/data
mkdir mongodb/logs
sudo ln -s /var/lib/mongodb mongodb/data/db
sudo ln -s /var/log/mongodb/mongod.log mongodb/logs/mongod.log

Verify that MongoDB has started successfully by checking log file at ~/mongodb/logs/mongod.log
[initandlisten] waiting for connections on port <port>

Uninstall mongodb
sudo apt-get purge mongodb-org*


PM2
===
good example:   https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04

sudo npm install -g pm2

Configure pm2 service

qiz264@ubuntu:~/.pm2$ pm2 startup systemd
[PM2] Init System found: systemd
[PM2] You have to run this command as root. Execute the following command:
qiz264@ubuntu:~/.pm2$ sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u qiz264 --hp /home/qiz264
[sudo] password for qiz264: 
[PM2] Init System found: systemd
Platform systemd
Template
[Unit]
Description=PM2 process manager
Documentation=https://pm2.keymetrics.io/
After=network.target

[Service]
Type=forking
User=qiz264
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TimeoutStartSec=8
Environment=PATH=/usr/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Environment=PM2_HOME=/home/qiz264/.pm2
PIDFile=/home/qiz264/.pm2/pm2.pid

ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all
ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill

[Install]
WantedBy=multi-user.target

Target path
/etc/systemd/system/pm2-qiz264.service
Command list
[ 'chmod +x /etc/systemd/system/pm2-qiz264.service',
  'systemctl enable pm2-qiz264',
  'systemctl start pm2-qiz264',
  'systemctl daemon-reload',
  'systemctl status pm2-qiz264' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-qiz264.service
[PM2] Making script booting at startup...
>>> Executing chmod +x /etc/systemd/system/pm2-qiz264.service
[DONE] 
>>> Executing systemctl enable pm2-qiz264
Created symlink from /etc/systemd/system/multi-user.target.wants/pm2-qiz264.service to /etc/systemd/system/pm2-qiz264.service.
[DONE] 
>>> Executing systemctl start pm2-qiz264
[DONE] 
>>> Executing systemctl daemon-reload
[DONE] 
>>> Executing systemctl status pm2-qiz264
● pm2-qiz264.service - PM2 process manager
   Loaded: loaded (/etc/systemd/system/pm2-qiz264.service; enabled; vendor preset: enabled)
   Active: active (running) since Sat 2017-03-11 22:24:02 PST; 235ms ago
     Docs: https://pm2.keymetrics.io/
 Main PID: 34353 (PM2 v2.4.2: God)
   CGroup: /system.slice/pm2-qiz264.service
           ‣ 34353 PM2 v2.4.2: God Daemon (/home/qiz264/.pm2)             

Mar 11 22:24:02 ubuntu pm2[34467]: [PM2] Resurrecting
Mar 11 22:24:02 ubuntu pm2[34467]: [PM2] Restoring processes located in /home/qiz264/.pm2/dump.pm2
Mar 11 22:24:02 ubuntu pm2[34467]: [PM2][ERROR] No processes saved; DUMP file doesn't exist
Mar 11 22:24:02 ubuntu pm2[34467]: ┌──────────┬────┬──────┬─────┬────────┬─────────┬────────┬─────┬─────┬──────────┐
Mar 11 22:24:02 ubuntu pm2[34467]: │ App name │ id │ mode │ pid │ status │ restart │ uptime │ cpu │ mem │ watching │
Mar 11 22:24:02 ubuntu pm2[34467]: └──────────┴────┴──────┴─────┴────────┴─────────┴────────┴─────┴─────┴──────────┘
Mar 11 22:24:02 ubuntu pm2[34467]:  Use `pm2 show <id|name>` to get more details about an app
Mar 11 22:24:02 ubuntu systemd[1]: pm2-qiz264.service: Supervising process 34353 which is not our child. We'll most likely not notice when it exits.
Mar 11 22:24:02 ubuntu systemd[1]: Started PM2 process manager.
Mar 11 22:24:02 ubuntu systemd[1]: pm2-qiz264.service: Supervising process 34353 which is not our child. We'll most likely not notice when it exits.
[DONE] 
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup systemd

Update /etc/systemd/system/pm2-qiz264.service  with
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 gracefulReload all

systemctl daemon-reload

Ngnix
=====
https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04

sudo apt-get update
sudo apt-get install nginx
sudo ufw enable
sudo ufw app list       (nginx related options: Nginx Full, Nginx HTTP, Nginx HTTPS)
sudo ufw allow 'Nginx HTTP'       (to deny:  sudo ufw deny 'Nginx HTTP') (to delete a rule:  sudo ufw delete deny 'Nginx HTTP')
sudo ufw status
systemctl status nginx
sudo systemctl start nginx
sudo systemctl restart nginx
sudo systemctl reload nginx
sudo systemctl stop nginx
sudo systemctl disable nginx    (disable nginx start up at boot. nginx is set up to start at boot by default)
sudo systemctl enable nginx     (reenable nginx start up at boot)

Test from your laptop:  http://192.168.86.155   (replace with your linux vm ip)

next step is ngnix config


Git
===
sudo apt-get install git
git config --global user.name "jic900"
git config --global user.email "jiachen.can@gmail.com"

set up ssh keys for pm2 deploy between your laptop and ubuntu vm
1. On laptop, set up Git Bash home by environment variable %HOME%   (eg., C:\qiz264\projects)
2. Open Git Bash, run
    ssh-keygen -t rsa      (hit enter for prompts. A .ssh dir will be created containing a key pair)
	ssh-copy-id -i $HOME/.ssh/id_rsa.pub qiz264@192.168.86.155
	ssh qiz264@192.168.86.155      (to test ssh without password prompt)

set up ssh keys on ubuntu vm for GitHub project clone
1. On ubuntu vm, navigate to $HOME, and run
    ssh-keygen -t rsa      (hit enter for prompts. A .ssh dir will be created containing a key pair)
2. Copy content of $HOME/.ssh/id_rsa.pub, and paste into a new GitHub SSH Key under Settings.
3. From ubuntu vm, run
    ssh -T git@github.com   (Must do. This will create an entry for git@github.com in $HOME/.ssh/known_hosts)
4. Test GitHub clone
    git clone git@github.com:jic900/acrossj-server.git

good examples:
http://blog.karmadust.com/automatic-node-js-deployments-on-a-linux-server-via-github/


Pre steps for pm2 deploy
========================
change password of ubuntu root user
sudo passwd

Enable ssh for root - update /etc/ssh/sshd_config with 'PermitRootLogin yes'

service ssh restart

Grant qiz264 permission to create directory under /var/www
ssh root@192.168.86.155
sudo adduser qiz264 www-data
sudo chown -R www-data:www-data /var/www
sudo chmod -R g+wr /var/www



Ubuntu vm snapshot
==================
create a snapshot at this point


PM2 deploy
==========
All pm2 deploy commands need to be run from Git Bash
pm2 deploy ecosystem.config.js development setup        (Clone GitHub repo and initialize the remote folder on Ubuntu vm. Tested, working)
pm2 deploy ecosystem.config.js development              (deploy code and start server)
